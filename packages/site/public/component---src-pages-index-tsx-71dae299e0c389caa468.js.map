{"version":3,"file":"component---src-pages-index-tsx-71dae299e0c389caa468.js","mappings":"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","sources":["webpack://site/./src/pages/index.tsx"],"sourcesContent":["import { useContext } from 'react';\nimport styled from 'styled-components';\nimport { MetamaskActions, MetaMaskContext } from '../hooks';\nimport {\n  connectSnap,\n  getSnap,\n  shouldDisplayReconnectButton,\n} from '../utils';\nimport {\n  ConnectButton,\n  InstallFlaskButton,\n  ReconnectButton,\n  Card,\n} from '../components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  margin-top: 7.6rem;\n  margin-bottom: 7.6rem;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding-left: 2.4rem;\n    padding-right: 2.4rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    width: auto;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 2.4rem;\n  text-align: center;\n`;\n\nconst Span = styled.span`\n  color: ${(props) => props.theme.colors.primary.default};\n`;\n\nconst Subtitle = styled.p`\n  font-size: ${({ theme }) => theme.fontSizes.large};\n  font-weight: 500;\n  margin-top: 0;\n  margin-bottom: 0;\n  ${({ theme }) => theme.mediaQueries.small} {\n    font-size: ${({ theme }) => theme.fontSizes.text};\n  }\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 64.8rem;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst Notice = styled.div`\n  background-color: ${({ theme }) => theme.colors.background.alternative};\n  border: 1px solid ${({ theme }) => theme.colors.border.default};\n  color: ${({ theme }) => theme.colors.text.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n\n  & > * {\n    margin: 0;\n  }\n  ${({ theme }) => theme.mediaQueries.small} {\n    margin-top: 1.2rem;\n    padding: 1.6rem;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.error.muted};\n  border: 1px solid ${({ theme }) => theme.colors.error.default};\n  color: ${({ theme }) => theme.colors.error.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-bottom: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding: 1.6rem;\n    margin-bottom: 1.2rem;\n    margin-top: 1.2rem;\n    max-width: 100%;\n  }\n`;\n\nconst Index = () => {\n  const [state, dispatch] = useContext(MetaMaskContext);\n\n  const handleConnectClick = async () => {\n    try {\n      await connectSnap();\n      const installedSnap = await getSnap();\n\n      dispatch({\n        type: MetamaskActions.SetInstalled,\n        payload: installedSnap,\n      });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: MetamaskActions.SetError, payload: e });\n    }\n  };\n\n  return (\n    <Container>\n      <Heading>Welcome to the Forta snap</Heading>\n      <Subtitle>\n        Install the Forta snap below\n      </Subtitle>\n      <CardContainer>\n        {state.error && (\n          <ErrorMessage>\n            <b>An error happened:</b> {state.error.message}\n          </ErrorMessage>\n        )}\n        {!state.isFlask && (\n          <Card\n            content={{\n              title: 'Install',\n              description:\n                'Snaps is pre-release software only available in MetaMask Flask, a canary distribution for developers with access to upcoming features.',\n              button: <InstallFlaskButton />,\n            }}\n            fullWidth\n          />\n        )}\n        {!state.installedSnap && (\n          <Card\n            content={{\n              title: 'Connect',\n              description:\n                'Get started by connecting to and installing the Forta snap.',\n              button: (\n                <ConnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.isFlask}\n                />\n              ),\n            }}\n            disabled={!state.isFlask}\n            fullWidth\n          />\n        )}\n        {shouldDisplayReconnectButton(state.installedSnap) && (\n          <Card\n            content={{\n              title: 'Reconnect',\n              description:\n                'While connected to a local running snap this button will always be displayed in order to update the snap if a change is made.',\n              button: (\n                <ReconnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.installedSnap}\n                />\n              ),\n            }}\n            disabled={!state.installedSnap}\n            fullWidth\n          />\n        )}\n      </CardContainer>\n    </Container>\n  );\n};\n\nexport default Index;\n"],"names":["Container","styled","div","withConfig","displayName","componentId","_ref","theme","mediaQueries","small","Heading","h1","Subtitle","span","props","colors","primary","default","p","_ref2","fontSizes","large","_ref3","_ref4","text","CardContainer","ErrorMessage","_ref5","background","alternative","_ref6","border","_ref7","_ref8","radii","_ref9","_ref10","error","muted","_ref11","_ref12","_ref13","_ref14","Index","state","dispatch","useContext","MetaMaskContext","handleConnectClick","async","connectSnap","installedSnap","getSnap","type","MetamaskActions","SetInstalled","payload","e","console","SetError","_jsxs","children","_jsx","message","isFlask","Card","content","title","description","button","InstallFlaskButton","fullWidth","ConnectButton","onClick","disabled","shouldDisplayReconnectButton","ReconnectButton"],"sourceRoot":""}